#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† - –∏–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
–ë–µ–∑ —É–º–Ω–∏—á–∞–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import markdownify
from bs4 import BeautifulSoup
from datetime import datetime
import os
import time
import re


class FullContentParser:
    def __init__(self, headless=True):
        self.output_dir = 'markdown_output'
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        self.chrome_options = Options()
        if headless:
            self.chrome_options.add_argument('--headless=new')
        
        self.chrome_options.add_argument('--no-sandbox')
        self.chrome_options.add_argument('--disable-dev-shm-usage')
        self.chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        self.chrome_options.add_argument('--window-size=1920,1080')
        self.chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
        
        # –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–Å, –≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.chrome_options.add_experimental_option("prefs", {
            "profile.default_content_setting_values.notifications": 2
        })
        
        self.driver = None
    
    def start_driver(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=self.chrome_options)
            self.driver.implicitly_wait(10)  # –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ 10 —Å–µ–∫—É–Ω–¥
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def stop_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            print("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    def parse_full_content(self, url):
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø–∞—Ä—Å–∏—Ç –í–°–Å"""
        if not self.driver:
            if not self.start_driver():
                return None
        
        print(f"\nüì° –ó–∞–≥—Ä—É–∑–∫–∞: {url}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
            
            # –ñ–¥–µ–º body
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –í–ê–ñ–ù–û: –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(5)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ü–û–õ–ù–û–°–¢–¨–Æ
            print("üìú –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.full_page_scroll()
            
            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            print("üîì –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            self.expand_everything()
            
            # –ï—â–µ —Ä–∞–∑ –∂–¥–µ–º
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = self.driver.title or "–†–µ—Ç—Ä–æ–∑–Ω–∞–∫"
            current_url = self.driver.current_url
            
            # –ë–ï–†–ï–ú –í–°–Å!
            print("üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –í–°–ï–ì–û –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            full_html = self.driver.page_source
            
            # –¢–∞–∫–∂–µ —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Selenium
            body_text = self.driver.find_element(By.TAG_NAME, "body").text
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ HTML: {len(full_html)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: {len(body_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Markdown –ë–ï–ó –ø–æ—Ç–µ—Ä—å
            markdown = self.convert_to_full_markdown(full_html, body_text, title, current_url)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            filename = 'retroznak_FULL.md'
            filepath = os.path.join(self.output_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(markdown)
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            html_file = filepath.replace('.md', '.html')
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(full_html)
            
            # –ò —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
            txt_file = filepath.replace('.md', '.txt')
            with open(txt_file, 'w', encoding='utf-8') as f:
                f.write(body_text)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:")
            print(f"   üìÑ Markdown: {filepath}")
            print(f"   üìÑ HTML: {html_file}")
            print(f"   üìÑ –¢–µ–∫—Å—Ç: {txt_file}")
            print(f"üìä –†–∞–∑–º–µ—Ä Markdown: {len(markdown)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return markdown
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def full_page_scroll(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –í–°–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É
        last_height = self.driver.execute_script("return document.body.scrollHeight")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        for i in range(10):  # –ë–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π!
            print(f"   –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {i+1}/10...")
            
            # –í–Ω–∏–∑
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(1)
            
            # –í —Å–µ—Ä–µ–¥–∏–Ω—É
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            time.sleep(0.5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É
            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height and i > 3:  # –ú–∏–Ω–∏–º—É–º 4 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                break
            last_height = new_height
        
        # –ù–∞–≤–µ—Ä—Ö
        self.driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(1)
    
    def expand_everything(self):
        """–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        # JavaScript –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –í–°–ï–ì–û
        expand_script = """
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤—Å–µ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
        document.querySelectorAll('*').forEach(el => {
            if (el.textContent && el.textContent.includes('–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')) {
                el.click();
            }
        });
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–µ—Ä–Ω—É—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        document.querySelectorAll('[data-toggle], .collapse, .collapsed, .accordion, .expandable').forEach(el => {
            el.click();
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        document.querySelectorAll('*').forEach(el => {
            if (window.getComputedStyle(el).display === 'none') {
                el.style.display = 'block';
            }
            if (window.getComputedStyle(el).visibility === 'hidden') {
                el.style.visibility = 'visible';
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã, —Å–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.hidden, .d-none, .invisible').forEach(el => {
            el.classList.remove('hidden', 'd-none', 'invisible');
        });
        """
        
        try:
            self.driver.execute_script(expand_script)
            print("   ‚úÖ –†–∞—Å–∫—Ä—ã—Ç–æ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        except:
            pass
    
    def convert_to_full_markdown(self, html, text_content, title, url):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Markdown –ë–ï–ó –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = f"""---
url: {url}
title: {title}
parsed_at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
parser: FULL Content Parser
mode: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –í–°–ï–ì–û –∫–æ–Ω—Ç–µ–Ω—Ç–∞
---

# {title}

"""
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        for tag in soup.find_all(['script', 'style', 'noscript']):
            tag.decompose()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –í–°–Å –≤ Markdown
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Markdown...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º markdownify —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            markdown_content = markdownify.markdownify(
                str(soup.body) if soup.body else str(soup),
                heading_style="ATX",
                bullets="-",
                strip=[],  # –ù–ï —É–¥–∞–ª—è–µ–º –Ω–∏—á–µ–≥–æ!
                wrap=False,  # –ù–ï –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                convert=['a', 'abbr', 'address', 'article', 'aside', 'audio',
                        'b', 'bdi', 'bdo', 'blockquote', 'br',
                        'caption', 'cite', 'code', 'col', 'colgroup',
                        'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt',
                        'em', 'embed',
                        'fieldset', 'figcaption', 'figure', 'footer', 'form',
                        'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr',
                        'i', 'iframe', 'img', 'input', 'ins',
                        'kbd', 'label', 'legend', 'li',
                        'main', 'map', 'mark', 'menu', 'meter',
                        'nav', 'object', 'ol', 'optgroup', 'option', 'output',
                        'p', 'param', 'picture', 'pre', 'progress', 'q',
                        'rp', 'rt', 'ruby',
                        's', 'samp', 'section', 'select', 'small', 'source', 'span', 'strong', 'sub', 'summary', 'sup',
                        'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track',
                        'u', 'ul', 'var', 'video', 'wbr']  # –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏!
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ markdownify: {e}")
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            markdown_content = text_content
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        markdown_content = re.sub(r'\n{5,}', '\n\n\n\n', markdown_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = "\n\n" + "="*60 + "\n\n"
        
        # –ï—Å–ª–∏ Markdown –ø–æ–ª—É—á–∏–ª—Å—è –º–∞–ª–µ–Ω—å–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if len(markdown_content) < len(text_content):
            markdown_content += separator + "## üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n" + text_content
        
        return metadata + markdown_content
    
    def analyze_content(self, url):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.driver:
            if not self.start_driver():
                return
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        self.driver.get(url)
        time.sleep(5)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'title': self.driver.title,
            'url': self.driver.current_url,
            'links': len(self.driver.find_elements(By.TAG_NAME, "a")),
            'images': len(self.driver.find_elements(By.TAG_NAME, "img")),
            'paragraphs': len(self.driver.find_elements(By.TAG_NAME, "p")),
            'headers': len(self.driver.find_elements(By.CSS_SELECTOR, "h1,h2,h3,h4,h5,h6")),
            'divs': len(self.driver.find_elements(By.TAG_NAME, "div")),
            'forms': len(self.driver.find_elements(By.TAG_NAME, "form")),
            'tables': len(self.driver.find_elements(By.TAG_NAME, "table")),
            'lists': len(self.driver.find_elements(By.CSS_SELECTOR, "ul,ol")),
        }
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´:")
        print("="*40)
        for key, value in stats.items():
            print(f"{key:15}: {value}")
        print("="*40)


def main():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† - –ë–ï–†–ï–ú –í–°–Å!                       ‚ïë
‚ïë            –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Ç–µ—Ä—å                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéØ –≠—Ç–æ—Ç –ø–∞—Ä—Å–µ—Ä:
   ‚Ä¢ –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
   ‚Ä¢ –ù–ï —É–¥–∞–ª—è–µ—Ç "–ª–∏—à–Ω–µ–µ"
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–Å –≤ —Ç—Ä–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
   ‚Ä¢ –†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   ‚Ä¢ –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    """)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    print("\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –ü–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –í–°–ï–ì–û")
    print("2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")
    
    choice = input("\n–í—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip() or "1"
    
    parser = FullContentParser(headless=True)
    
    try:
        url = 'https://xn--80ajgnnembr.xn--p1ai/'
        
        if choice == "2":
            parser.analyze_content(url)
        else:
            markdown = parser.parse_full_content(url)
            
            if markdown:
                print("\n" + "="*60)
                print("‚ú® –£–°–ü–ï–®–ù–û –ò–ó–í–õ–ï–ß–ï–ù–û –í–°–Å!")
                print("="*60)
                print("\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ 3 —Ñ–∞–π–ª–∞ –≤ markdown_output/:")
                print("   ‚Ä¢ retroznak_FULL.md - Markdown –≤–µ—Ä—Å–∏—è")
                print("   ‚Ä¢ retroznak_FULL.html - –°—ã—Ä–æ–π HTML")
                print("   ‚Ä¢ retroznak_FULL.txt - –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç")
                print("\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é")
                print("   –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .md —Ñ–∞–π–ª")
    
    finally:
        parser.stop_driver()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")


if __name__ == '__main__':
    main()